{"version":3,"sources":["redux/calendar/reducer.js","redux/constants.js","redux/index.js","store.js","localStorage.js","redux/calendar/action.js","components/slot/slot.js","components/modal/customModal.js","components/calendar/Calendar.js","App.js","serviceWorker.js","index.js"],"names":["initialState","events","error","calendarReducer","state","action","type","add_events","payload","event_id","event","del_events","upd_events","combineReducers","calendar","CalendarReducer","loggerMiddleware","createLogger","middleware","thunkMiddleware","persistedState","serialzedState","localStorage","getItem","JSON","parse","err","loadState","store","createStore","reducers","compose","applyMiddleware","subscribe","stringify","setItem","saveState","getState","addEvent","dispatch","deleteEvent","dragging_id","dropping_id","slot","props","dragEnd","e","target","id","day","alert","this","time","card_class","card_values","onDrop","preventDefault","onDragOver","Card","className","onDragEnd","draggable","onClick","cardClicked","CardBody","CardTitle","CardSubtitle","name","React","Component","connect","bindActionCreators","CustomModal","card_id","card_booked","Modal","isOpen","modal_open","toggle","ModalBody","style","marginBottom","float","margin","Input","fontSize","fontWeight","value","event_text","onChange","handleTextChange","month","date","Button","backgroundColor","color","borderStyle","addingEvent","document","getElementById","deletingEvent","special_class","Calendar","setState","toggle_modal","event_name","getWeek","currentDate","moment","days","i","push","format","add","timelist","map","date_val","visibility","key","Fragment","showCurrentWeek","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.7338bd22.chunk.js","sourcesContent":["import {ADD_EVENT, DELETE_EVENT, UPDATE_EVENT} from \"../constants\";\n\nconst initialState = {\n    events: {},\n    error: ''\n};\n\nconst calendarReducer = (state = initialState,action) => {\n    switch(action.type) {\n        case ADD_EVENT:\n            const add_events = { ...state.events };\n            add_events[action.payload.event_id] = action.payload.event;\n\n            return { ...state,events: add_events };\n\n        case DELETE_EVENT:\n            const del_events = { ...state.events };\n            delete del_events[action.payload];\n\n            return { ...state,events: del_events };\n\n        case UPDATE_EVENT:\n            const upd_events = { ...state.events };\n            upd_events[action.payload.event_id] = action.payload.event;\n\n            return { ...state,events: upd_events };\n\n        default:\n            return state;\n    }\n}\n\nexport default calendarReducer;\n","export const ADD_EVENT = \"ADD_EVENT\";\nexport const DELETE_EVENT = \"DELETE_EVENT\";\nexport const UPDATE_EVENT = \"UPDATE_EVENT\";","import { combineReducers } from 'redux';\nimport CalendarReducer from './calendar/reducer';\n\nexport default combineReducers({\n    calendar : CalendarReducer\n});","\nimport { \n\tloadState,\n\tsaveState \n} from './localStorage';\n\nimport { \n\tcompose, \n\tcreateStore, \n\tapplyMiddleware \n} from 'redux';\n\nimport { \n\tcreateLogger \n} from 'redux-logger';\n\nimport thunkMiddleware from 'redux-thunk';\n\nimport reducers from './redux'\n\n\nconst enhancers = [];\n\nconst loggerMiddleware = createLogger();\n\nconst middleware = [\n  thunkMiddleware,\n  loggerMiddleware,\n]\n\nconst persistedState = loadState();\n\nexport const store = createStore(\n  reducers,\n  persistedState,\n  compose(\n    applyMiddleware(...middleware,),\n    ...enhancers\n  )\n);\n\n\nstore.subscribe(() => {\n  saveState({\n\t  calendar: store.getState().calendar,\n  });\n});\n","\n/*eslint-disable*/\n\nexport const loadState = () => {\n  try {\n    const serialzedState = localStorage.getItem('state');\n    if (serialzedState === null) {\n      return undefined;\n    }\n    return JSON.parse(serialzedState);\n  } catch (err) {\n    return undefined; \n  }\n};\n\nexport const saveState = (state) => {\n  try {\n    const serialzedState = JSON.stringify(state);\n    localStorage.setItem('state', serialzedState);\n  } catch (err) {\n    //Log error\n  }\n}\n","import {ADD_EVENT, DELETE_EVENT, UPDATE_EVENT} from \"../constants\";\n\nexport const addEvent = (event_id,event) => {\n  return (dispatch) => dispatch({\n    type: ADD_EVENT,\n    payload: { event_id,event }\n  });\n};\n\nexport const deleteEvent = (event_id) => {\n  return (dispatch) => dispatch({\n  type: DELETE_EVENT,\n  payload: event_id\n})\n};\n\nexport const updateEvent = (event_id,event) => {\n  return (dispatch) => dispatch({\n    type: UPDATE_EVENT,\n    payload: {event_id, event}\n  })\n};\n","import React from 'react';\nimport './style.scss';\nimport { connect } from \"react-redux\";\nimport {bindActionCreators} from 'redux';\nimport { addEvent,deleteEvent } from '../../redux/calendar/action';\nimport {\n  Card, CardBody,\n  CardTitle, CardSubtitle\n} from 'reactstrap';\n\nlet dragging_id = null;\nlet dropping_id = null;\n\nclass slot extends React.Component {\n  // eslint-disable-next-line no-useless-constructor\n  constructor(props) {\n    super(props);\n  }\n\n  dragEnd = (e) => {\n    dragging_id = e.target.id;\n\n    if (dropping_id && JSON.parse(dropping_id).day === 'Sunday') {\n      alert(\"Can't be dragged on Sundays\");\n      return;\n    }\n    if (!dragging_id || !dropping_id) return;\n    const {events} = this.props;\n\n    if (events[dragging_id] && !events[dropping_id]) {\n      this.props.addEvent(dropping_id, {\n        ...events[dragging_id]\n      });\n\n      this.props.deleteEvent(dragging_id);\n\n      dragging_id = null;\n      dropping_id = null;\n    } else {\n      alert('Room not available!');\n    }\n  };\n\n  render() {\n    const { events,id,time } = this.props;\n\n    const card_class = JSON.parse(id).day !== \"Sunday\" ? ((events[id]) ? 'card_custom_select' : 'card_custom') : 'card_custom_blocked';\n\n    const card_values = (events[id]) ? events[id] : {};\n\n    return (\n      <div\n        onDrop={(e) => {\n          e.preventDefault();\n          dropping_id = e.target.id;\n        }}\n        onDragOver={(e) => e.preventDefault()}\n      >\n\n        <Card className={`${card_class} mr-3`}\n          onDragEnd={(e) => this.dragEnd(e)}\n          draggable=\"true\"\n          id={this.props.id}\n          onClick={() => JSON.parse(id).day === \"Sunday\" ? alert(\"Hey!! This is Sunday\") : this.props.cardClicked(id)}\n        >\n          <CardBody id={id}>\n            <CardTitle id={id}>{time}</CardTitle>\n            <CardSubtitle id={id}>{JSON.parse(id).day === \"Sunday\" ? \"Blocked\" : card_values.name || 'Open'}</CardSubtitle>\n          </CardBody>\n        </Card>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n    events: state.calendar.events,\n    error: state.calendar.error\n})\n\n\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators({addEvent, deleteEvent}, dispatch)\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(slot);\n","/* eslint react/no-multi-comp: 0, react/prop-types: 0 */\n\nimport React  from 'react';\nimport { Button, Modal, ModalBody, Input } from 'reactstrap';\nimport './style.scss';\n\nconst CustomModal = (props) => {\n    const card_id = JSON.parse(props.card_booked);\n\n    return (\n        <div>\n            <Modal isOpen={props.modal_open} toggle={props.toggle} className=\"my-modal\">\n                <ModalBody>\n                    <div>\n                        <button\n                            className=\"close\"\n                            style={{marginBottom: '20px',\n                                float: 'left'\n                            }}\n                            onClick={props.toggle}>&times;</button>\n                    </div>\n                    <div style={{margin: '30px'}}>\n                        <Input\n                            style={{fontSize:'2em',fontWeight:'bold'}}\n                            className=\"custum_class_input\"\n                            value={`${props.event_text}`}\n                            id=\"event_name\"\n                            onChange={(e) => props.handleTextChange(e)}/>\n                        <b>\n                            { (card_id) ? `${card_id.day}, ${card_id.month} ${card_id.date} at ${card_id.time}` : null }\n                        </b>\n\n                        <div className=\"schedule-cancel-button\">\n                            <Button\n                                style={{backgroundColor: '#f5ca5f', color:'white', borderStyle: 'none'}}\n                                onClick={() => {props.toggle(); props.addingEvent(document.getElementById('event_name').value)}}>\n                                <i className=\"fas fa-calendar mr-2\"></i>\n                                Reschedule</Button>{' '}\n                            <Button\n                                style={{backgroundColor: '#fa4141', color:'white', borderStyle: 'none'}}\n                                onClick={() => {props.toggle(); props.deletingEvent(JSON.stringify(card_id))}}>\n                                <i className=\"fas fa-times mr-2\"></i>\n                                Cancel Event</Button>\n                        </div>\n                    </div>\n                </ModalBody>\n            </Modal>\n        </div>\n    );\n}\n\nexport default CustomModal;","import React from 'react';\nimport Card from '../slot/slot';\nimport CustomModal from '../modal/customModal';\nimport './style.scss';\nimport { connect } from \"react-redux\";\nimport { addEvent,deleteEvent } from '../../redux/calendar/action';\nimport moment from 'moment';\nimport {bindActionCreators} from \"redux\";\n\nconst special_class = \"d-flex align-items-center justify-content-center\";\n\nclass Calendar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.timelist = ['7:00 AM', '8:00 AM','9:00 AM','10:00 AM','11:00 AM','12:00 PM','1:00 PM','2:00 PM','3:00 PM','4:00 PM','5:00 PM'];\n    this.state = {\n      card_booked: null,\n      event_text: '',\n      modal_open: false\n    }\n  }\n\n  handleTextChange = (e) => {\n    this.setState({event_text: e.target.value});\n  }\n\n  toggle_modal = () => {\n    this.setState({modal_open: !this.state.modal_open})\n  }\n\n  cardClicked = (card_id) => {\n    const event_name = this.props.events[card_id] ? this.props.events[card_id].name : '';\n    this.setState({ card_booked: card_id, event_text: event_name, modal_open: !this.state.modal_open });\n  }\n\n  addingEvent = (event_name) => {\n    this.props.addEvent(this.state.card_booked,{\n      name: event_name,\n      ...JSON.parse(this.state.card_booked)\n    });\n  }\n\n  deletingEvent = (event_id) => {\n    this.props.deleteEvent(event_id);\n  }\n\n\n  getWeek = () => {\n    var currentDate = moment();\n    var days = [];\n\n    for (var i = 0; i <= 6; i++) {\n      days.push({\n        month: currentDate.format(\"MMMM\"),\n        date: currentDate.format('DD'),\n        day: currentDate.format('dddd')\n      });\n      currentDate = currentDate.add(1, 'days');\n    }\n\n    return days;\n  }\n\n  showCurrentWeek() {\n    const list_of_dates = this.getWeek()\n    return(\n        list_of_dates.map((date_val,i) => (\n            <div className=\"flex-column\">\n              <div className={special_class}>\n                {!i ? <div className=\"pr-4\" style={{visibility:'hidden'}}>{'8:00 AM'}</div> : null}\n\n                <div>\n                  <div className=\"text-center week_day\" key={`week_${i}`}>\n                    {date_val.day}\n                  </div>\n                  <div className=\"text-center date\" key={`date_${i}`}>\n                    {date_val.date}\n                  </div>\n                </div>\n              </div>\n\n              {this.timelist.map(time => (\n                  <div className={`${special_class} mt-3`}>\n                    {!i ? <div className=\"pr-4\"><b>{time}</b></div> : null}\n                    <Card time={time} id={`${JSON.stringify({ ...date_val,time })}`} cardClicked={this.cardClicked} />\n                  </div>\n              ))}\n            </div>\n        ))\n    );\n  }\n\n\n  render() {\n    const { events } = this.props;\n\n    return(\n        <React.Fragment>\n          <div className=\"calendar\">\n            <div className=\"container-fluid\">\n              <div className={special_class}>\n                {this.showCurrentWeek()}\n              </div>\n            </div>\n          </div>\n          <CustomModal\n              toggle={this.toggle_modal}\n              modal_open={this.state.modal_open}\n              card_booked={this.state.card_booked}\n              events={events}\n              addingEvent={this.addingEvent}\n              deletingEvent={this.deletingEvent}\n              handleTextChange={this.handleTextChange}\n              event_text={this.state.event_text}\n          />\n        </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n      events: state.calendar.events,\n      error: state.calendar.error\n})\n\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators({addEvent, deleteEvent}, dispatch)\n};\n\nexport default connect(mapStateToProps,mapDispatchToProps)(Calendar);","import React from 'react';\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\n\nimport Calendar from './components/calendar/Calendar';\n\nfunction App() {\n  return (\n        <BrowserRouter>\n          <Switch>\n            <Route path=\"/\" component={Calendar} />\n          </Switch>\n        </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\n/*eslint-disable*/\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\n\nimport {\n    store\n} from './store'\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render((\n    <Provider store={store}>\n        <App />\n    </Provider>\n), document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}